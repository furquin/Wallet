{"version":3,"sources":["services/walletAPI.js","actions/index.js","components/UserLogin.js","pages/Login.js","components/Header.js","components/Table.js","components/UserWallet.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["fetchApi","fetch","then","response","json","ok","Promise","resolve","reject","saveWalletInfo","expenses","currencies","type","UserLogin","handleChange","target","name","value","setState","state","senha","email","key","length","disabled","match","redirect","userValues","props","this","action","htmlFor","id","placeholder","data-testid","onChange","onClick","to","Component","connect","dispatch","saveInfoUser","Login","React","Header","sumExpenses","reduce","acc","curr","exchangeRates","currency","ask","toFixed","user","wallet","Table","map","expense","description","tag","method","Number","split","UserWallet","submitExpenses","getExpenses","getCurrencies","currencyValue","index","label","a","ApiResult","objectApi","Object","keys","USDT","indexOf","splice","saveWalletInfoThunk","Wallet","App","console","log","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a4867c0.chunk.js","sourcesContent":["const ENDPOINT = 'https://economia.awesomeapi.com.br/json/all';\n\nconst fetchApi = () => (\n  fetch(ENDPOINT)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default fetchApi;\n","import fetchApi from '../services/walletAPI';\n\nexport const USER_INFO = 'USER_INFO';\nexport const WALLET_INFO = 'WALLET_INFO';\nexport const CURRENCY = 'CURRENCY';\n\nexport const saveInfoUser = (email) => ({\n  type: USER_INFO,\n  email,\n});\n\nexport const saveWalletInfo = (expenses, currencies) => ({\n  type: WALLET_INFO,\n  expenses,\n  currencies,\n});\n\nexport const saveCurrencyInfo = (currencies) => ({\n  type: CURRENCY,\n  currencies,\n});\n\nexport const saveWalletInfoThunk = (expenses) => async (dispatch) => {\n  const currencies = await fetchApi();\n  dispatch(saveWalletInfo(expenses, currencies));\n};\n\nexport const saveCurrencyInfoThunk = () => async (dispatch) => {\n  const ApiResult = await fetchApi();\n  const objectApi = Object.keys(ApiResult);\n  const USDT = objectApi.indexOf('USDT');\n  objectApi.splice(USDT, 1);\n  dispatch(saveCurrencyInfo(objectApi));\n};\n","import React, { Component } from 'react';\nimport PropsType from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { saveInfoUser } from '../actions/index';\n\nexport class UserLogin extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      senha: '',\n      redirect: false,\n      disabled: null,\n    };\n  }\n\n  // & função consultada no repositório da Laura Fumagalli https://github.com/tryber/sd-016-a-project-trybewallet/pull/29/commits/1580e3f0f2c47a96e581661f01d88c984005aae2\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value }, () => {\n      const { senha, email } = this.state;\n      const minValue = 6;\n      const object = { key: senha.length >= minValue };\n      const { key } = object;\n      this.setState({ disabled: email.match(/\\w{1,20}@\\w{1,10}\\.com/g) && key });\n    });\n  }\n\n  redirect = () => {\n    this.setState({ redirect: true });\n    const { userValues } = this.props;\n    const { email } = this.state;\n    userValues(email);\n  }\n\n  render() {\n    const { email, senha, redirect, disabled } = this.state;\n    return (\n      <div>\n        <form action=\"\">\n          <label htmlFor=\"email\">\n            E-mail:\n            <input\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              placeholder=\"Insira seu e-mail\"\n              data-testid=\"email-input\"\n              onChange={ this.handleChange }\n              value={ email }\n            />\n          </label>\n          <label htmlFor=\"password\">\n            Senha:\n            <input\n              type=\"password\"\n              name=\"senha\"\n              id=\"senha\"\n              placeholder=\"Insira sua senha\"\n              data-testid=\"password-input\"\n              onChange={ this.handleChange }\n              value={ senha }\n            />\n          </label>\n\n          <button\n            type=\"button\"\n            onClick={ this.redirect }\n            disabled={ !disabled }\n          >\n            Entrar\n\n          </button>\n          {redirect && <Redirect to=\"/carteira\" />}\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  userValues:\n    (email) => dispatch(saveInfoUser(email)),\n});\n\nUserLogin.propTypes = {\n  userValues: PropsType.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(UserLogin);\n","import React from 'react';\nimport UserLogin from '../components/UserLogin';\n\nclass Login extends React.Component {\n  render() {\n    return (\n\n      <div>\n        <UserLogin />\n      </div>);\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nexport class Header extends Component {\n  render() {\n    const { email, expenses } = this.props;\n\n    const sumExpenses = expenses.reduce((acc, curr) => {\n      const values = curr.value * curr.exchangeRates[curr.currency].ask;\n      return values + acc;\n    }, 0);\n    return (\n      <div>\n        <header>\n          <h3 data-testid=\"email-field\">\n            { email }\n          </h3>\n          <h3 data-testid=\"total-field\">\n            Despesa: R$\n            {sumExpenses.toFixed(2)}\n\n          </h3>\n          <h3 data-testid=\"header-currency-field\">\n            BRL\n          </h3>\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nexport class Table extends Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <div>\n        <table>\n          <thead>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th> Editar/Excluir</th>\n          </thead>\n          <tbody>\n            {expenses.map((expense) => (\n              <tr\n                key={ expense.id }\n              >\n\n                <td>{expense.description}</td>\n                <td>{ expense.tag}</td>\n                <td>{expense.method }</td>\n                <td>{expense.value }</td>\n                <td>{ Number(expense.exchangeRates[expense.currency].ask).toFixed(2)}</td>\n                <td>Real</td>\n                <td>\n                  {Number(expense.exchangeRates[expense.currency].ask * expense.value)\n                    .toFixed(2)}\n                </td>\n                <td>{ expense.exchangeRates[expense.currency].name.split('/')[0] }</td>\n                <td> Editar/Excluir</td>\n              </tr>))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Table);\n","import React, { Component } from 'react';\nimport PropsType from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveCurrencyInfoThunk, saveWalletInfoThunk } from '../actions';\n\nexport class UserWallet extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: '',\n      tag: '',\n    };\n  }\n\n  componentDidMount() {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  }\n\n  submitExpenses = () => {\n    const { getExpenses } = this.props;\n    getExpenses(this.state);\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { currencies } = this.props;\n    const {\n      value,\n      description,\n      currency,\n      method,\n      tag } = this.state;\n\n    return (\n\n      <div>\n        <form>\n          <label htmlFor=\"value-input\">\n            Valor das despesas:\n            <input\n              type=\"text\"\n              name=\"value\"\n              id=\"value-input\"\n              data-testid=\"value-input\"\n              value={ value }\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"description-input\">\n            Descrição das despesas:\n            <input\n              type=\"text\"\n              name=\"description\"\n              id=\"description-input\"\n              data-testid=\"description-input\"\n              value={ description }\n              onChange={ this.handleChange }\n            />\n          </label>\n\n          <label htmlFor=\"currency\">\n            Moeda:\n            <select\n              name=\"currency\"\n              id=\"currency\"\n              data-testid=\"currency-input\"\n              value={ currency }\n              onChange={ this.handleChange }\n            >\n              {\n                currencies.map((currencyValue, index) => (\n                  <option\n                    value={ currencyValue }\n                    key={ index }\n                    data-testid={ currencyValue }\n\n                  >\n                    {currencyValue}\n\n                  </option>\n                ))\n              }\n            </select>\n          </label>\n          <label htmlFor=\"method\">\n            Forma de pagamento:\n            <select\n              label=\"método_de_pagamento\"\n              name=\"method\"\n              id=\"method\"\n              data-testid=\"method-input\"\n              value={ method }\n              onChange={ this.handleChange }\n            >\n              <option>Dinheiro</option>\n              <option>Cartão de crédito</option>\n              <option>Cartão de débito</option>\n            </select>\n          </label>\n          <label htmlFor=\"tag\">\n            Selecionar categoria:\n            <select\n              label=\"categoria_de_compra\"\n              name=\"tag\"\n              id=\"tag\"\n              data-testid=\"tag-input\"\n              value={ tag }\n              onChange={ this.handleChange }\n            >\n              <option>Alimentação</option>\n              <option>Lazer</option>\n              <option>Trabalho</option>\n              <option>Transporte</option>\n              <option>Saúde</option>\n\n            </select>\n          </label>\n          <button\n            type=\"button\"\n            onClick={ this.submitExpenses }\n\n          >\n            Adicionar despesa\n          </button>\n        </form>\n      </div>\n\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(saveCurrencyInfoThunk()),\n  getExpenses: (expenses) => dispatch(saveWalletInfoThunk(expenses)),\n});\n\nUserWallet.propTypes = {\n  currencies: PropsType.arrayOf(PropsType.string).isRequired,\n  getCurrencies: PropsType.func.isRequired,\n  getExpenses: PropsType.func.isRequired,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(UserWallet);\n","import React from 'react';\nimport Header from '../components/Header';\nimport Table from '../components/Table';\nimport UserWallet from '../components/UserWallet';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <UserWallet />\n        <Table />\n      </div>);\n  }\n}\n\nexport default Wallet;\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport fetchApi from './services/walletAPI';\n\nexport class App extends Component {\n  render() {\n    const ApiResult = fetchApi();\n    const objectApi = Object.keys(ApiResult);\n    console.log(objectApi);\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={ Login } />\n          <Route exact path=\"/carteira\" component={ Wallet } />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { USER_INFO } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n  senha: '',\n\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_INFO: {\n    return {\n      ...state, email: action.email,\n    };\n  }\n\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","import { WALLET_INFO, CURRENCY } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n};\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case WALLET_INFO: {\n    return {\n      ...state,\n      expenses: [...state.expenses,\n        {\n          ...action.expenses,\n          exchangeRates: action.currencies,\n          id: state.expenses.length,\n        },\n      ],\n    };\n  }\n\n  case CURRENCY: {\n    return { ...state, currencies: action.currencies };\n  }\n\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducers = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducers from '../reducers/index';\n\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunk)));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}